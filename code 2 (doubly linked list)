#include<iostream>
#include<climits>
using namespace std;
class node{
    public:
    int data;
    node* prev;
    node* next;
    
    node(int val){
        data=val;
        prev=NULL;
        next=NULL;
    }
};
void insertathead(node* &head,int val){
    node* temp=new node(val);
    temp->next=head;
    head->prev=temp;
    head=temp;
}
void insertattail(node* head,int val){
    node* n=new node(val);
    node* temp=head;
    if(head==NULL){
        head=n;
        return;
    }
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
    n->prev=temp;
}
void insertatposition(node*head,int pos,int val){
    node* n=new node(val);
    if(pos<=1 || head==NULL){
        head=n;
        return;
    }
    node* current=head;
    for(int i=0;i<pos-1 && current->next;++i){
        current=current->next;
    }
    n->next=current->next;
    n->prev=current;
    
    if(current->next){
        current->next->prev=head;
    }
    current->next=n;
}
void deleteathead(node* &head){
    if(head==NULL){
        cout<<"the list is empty hence cannot delete any element!"<<endl;
        return;
    }
    node* temp=head;
    if(head->next!=NULL){
        head=head->next;
        head->prev=NULL;
    }
    else{
        head=NULL;
    }
    delete temp;
}
void deleteattail(node* &head){
    if(head==NULL){
        cout<<"the list is empty hence cannot delete any element"<<endl;
        return;
    }
    if(head->next==NULL){
        delete head;
        head=NULL;
        return;
    }
    node* current=head;
    while(current->next->next!=NULL){
        current=current->next;
    }
    delete current->next;
    current->next=NULL;
}
void deleteatposition(node* &head,int pos){
   
    if(head==NULL){
        cout<<"list id empty hence cannot delete any element"<<endl;
        return;
    }
    if(pos<=0){
       cout<<"invalid position cannot delete any element!"<<endl;
       return;
    }
    if(pos==1){
        node* temp=head;
        head=head->next;
        if(head!=NULL){
            head->prev=NULL;
        }
        delete temp;
        return;
    }
    int counter=1;
    node* current=head;
    while(current!=NULL && counter<pos){
        current=current->next;
        counter++;
    }
    if(current==NULL){
        cout<<"the position exceeds the size of the list"<<endl;
        return;
    }
    if(current->prev!=NULL){
        current->prev->next=current->next;
    }
    if(current->next!=NULL){
        current->next->prev=current->prev;
    }
    delete current;
}
void display(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int getlength(node*head){
    int len=0;
    node* temp=head;
    while(temp!=NULL){
        len++;
        temp=temp->next;
    }
   return len;
}


int main(){
    node* node1=new node(10);
    node* head=node1;
    display(head);
    cout<<"the length of the list is: "<<getlength(head)<<endl;
    insertathead(head,11);
    insertathead(head,12);
    insertathead(head,13);
    display(head);
    insertattail(head,9);
    display(head);
    insertatposition(head,3,14);
    display(head);
    deleteathead(head);
    display(head);
    deleteattail(head);
    display(head);
    deleteatposition(head,4);
    display(head);
    return 0;
}
