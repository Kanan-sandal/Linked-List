#include <iostream>
using namespace std;

class node {
    public:
    int data;
    node* next;
    
    node(int val){
        data=val;
        next=NULL;
    } 
};
void deleteatstart(node* &head){
    if(head==NULL){
        cout<<"list is empty cannot delete!"<<endl;
        return;
    }
    node* temp=head;
    node* current=head;
    while(current->next!=head){
        current=current->next;
    }
    current->next=head->next;
    head=head->next;
    
    delete temp;
}
void deleteatend(node* &head){
    if(head==NULL){
        cout<<"the list is empty"<<endl;
        return;
    }
    if(head->next==head){
        delete head;
        head=NULL;
        return;
    }
    node* last=head;
    node* secondlast=NULL;
    
    while(last->next!=head){
        secondlast=last;
        last=last->next;
    }
     secondlast->next=head;
     
     delete last;
}
void deleteatposition(node*& head, int position) {
  
    if (head == NULL) {
        cout << "List is empty. Cannot delete.\n";
        return;
    }

    if (position == 0) {
        node* last = head;
        while (last->next != head) {
            last = last->next;
        }
        last->next = head->next;
        node* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    node* current = head;
    node* previous = NULL;
    int currentPosition = 0;

    while (currentPosition < position && current->next != head) {
        previous = current;
        current = current->next;
        currentPosition++;
    }

   
    if (currentPosition < position) {
        cout << "Invalid position. Cannot delete.\n";
        return;
    }

    
    previous->next = current->next;

   
    delete current;
}
void displayList(node* head) {
    if (head == NULL) {
        cout << "List is empty"<<endl;
        return;
    }

    node* current = head;

    do {
        cout << current->data << " ";
        current = current->next;
    } while (current != head);

    cout << endl;
}
int main() {
    
    node* head = new node(1);
    head->next = new node(2);
    head->next->next = new node(3);
    head->next->next->next = head;

    cout << "Original list: ";
    displayList(head);
    
    // deleteatstart(head);
    // cout<<"list after deletion: ";
    // displayList(head);
    
    // deleteatend(head);
    // cout<<"list after deletion: ";
    // displayList(head);
    
    int position;
    cout<<"enter the position you want to delete the element from: ";
    cin>>position;
    deleteatposition(head,position);
    cout<<"list after deletion: ";
    displayList(head);
    return 0;
}
