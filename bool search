#include<iostream>
#include<climits>
using namespace std;
class node{
    public:
    int data;
    node*next;
    
    node(int val){
        data=val;
        next=NULL;
    }
};
void insertathead(node* &head,int val){
    node *n=new node(val);
    n->next=head;
    head=n;
}
void insertattail(node* &head,int val){
    node* n=new node(val);
    
    if(head==NULL){
        head=n;
        return;
    }
    node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}
void insertatindex(node* &head,int index,int val){
    if(index<0){
        cout<<"invalid index"<<endl;
        return ;
    }
    if(index==0){
        insertathead(head,val);
        return;
    }
    node* n=new node(val);
    node* temp=head;
    
    for(int i=0;i<index-1 && temp!=NULL;i++){
        temp=temp->next;
    }
    if(temp==NULL){
        cout<<"index out of bounds"<<endl;
        return;
    }
    n->next=temp->next;
    temp->next=n;
}
void display(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}
//BOOL SEARCH:
bool search(node* head,int key){
    node* temp=head;
    while(temp!=NULL){
        if(temp->data==key){
            return true;
            
        }
        temp=temp->next;
    }
    return false;
}
int main(){
    node* head=NULL;
    insertattail(head,1);
    insertattail(head,2);
    insertattail(head,3);
   
    insertathead(head,4);
    
    insertatindex(head,2,5);
   
    insertatindex(head,1,6);
    display(head);
    cout<<search(head,1)<<endl;
    
    return 0;
}
    
