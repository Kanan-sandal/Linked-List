#include<iostream>
#include<climits>
using namespace std;
class node{
    public:
    int data;
    node*next;
    
    node(int val){
        data=val;
        next=NULL;
    }
};
void insertathead(node* &head,int val){
    node *n=new node(val);
    n->next=head;
    head=n;
}
void insertattail(node* &head,int val){
    node* n=new node(val);
    
    if(head==NULL){
        head=n;
        return;
    }
    node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;
}
void insertatindex(node* &head,int index,int val){
    if(index<0){
        cout<<"invalid index"<<endl;
        return ;
    }
    if(index==0){
        insertathead(head,val);
        return;
    }
    node* n=new node(val);
    node* temp=head;
    
    for(int i=0;i<index-1 && temp!=NULL;i++){
        temp=temp->next;
    }
    if(temp==NULL){
        cout<<"index out of bounds"<<endl;
        return;
    }
    n->next=temp->next;
    temp->next=n;
}
void display(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}
//ITERATIVE APPROACH:
node *reverse(node* &head){
    node* pre=NULL;
    node* curr=head;
    node *next;
    
    while(curr!=NULL){
        next=curr->next;
        curr->next=pre;
        
        pre=curr;
        curr=next;
    }
    return pre;
}
//RECURSIVE APPROACH:
node* reverserecursive(node* &head){
    if(head==NULL || head->next==NULL){
        return head;
    }
    node* newhead=reverserecursive(head->next);
    head->next->next=head;
    head->next=NULL;
    
    return newhead;
    
}
int main(){
    node* head=NULL;
    insertattail(head,1);
    insertattail(head,2);
    insertattail(head,3);
    insertattail(head,4);
    display(head);
    node* newhead=reverserecursive(head);
    display(newhead);
   
    return 0;
}
    
